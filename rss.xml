<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>John - Atom feed</title>
    <link href="http://shi2wei3.github.io/rss.xml" rel="self" />
    <link href="http://shi2wei3.github.io" />
    <id>http://shi2wei3.github.io/rss.xml</id>
    <author>
        <name>Wei Shi</name>
        <email>shi2wie3@gmail.com</email>
    </author>
    <updated>2015-08-24T00:00:00Z</updated>
    <entry>
    <title>Install haskell locally without root permission</title>
    <link href="http://shi2wei3.github.io/posts/2015-08-24-install-haskell-locally.html" />
    <id>http://shi2wei3.github.io/posts/2015-08-24-install-haskell-locally.html</id>
    <published>2015-08-24T00:00:00Z</published>
    <updated>2015-08-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Official Guide</p>
<p><a href="https://www.haskell.org/downloads/linux" class="uri">https://www.haskell.org/downloads/linux</a></p>
<h2 id="prepare-haskell-packages">Prepare haskell packages</h2>
<p>Glasgow Haskell Compiler (GHC)</p>
<p><a href="https://www.haskell.org/ghc/download" class="uri">https://www.haskell.org/ghc/download</a></p>
<p>Cabal-install</p>
<p><a href="http://hackage.haskell.org/package/cabal-install" class="uri">http://hackage.haskell.org/package/cabal-install</a></p>
<h2 id="install-haskell-packages">Install haskell packages</h2>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="fu">tar</span> xf ghc-7.10.2-x86_64-unknown-linux-deb7.tar.xz
<span class="bu">cd</span> ghc-7.10.2/
<span class="ex">./configure</span> --prefix=/home/wshi/.cabal
<span class="fu">make</span> install
<span class="bu">cd</span>
<span class="fu">tar</span> xf cabal-install-1.22.6.0.tar.gz
<span class="bu">cd</span> cabal-install-1.22.6.0/
<span class="ex">./bootstrap.sh</span>
<span class="ex">cabal</span> update
<span class="fu">rm</span> -f ghc-7.10.2-x86_64-unknown-linux-deb7.tar.xz cabal-install-1.22.6.0.tar.gz</code></pre></div>]]></summary>
</entry>
<entry>
    <title>Oracle 11g XE on RHEL7</title>
    <link href="http://shi2wei3.github.io/posts/2014-12-03-oracle-11g-xe-on-rhel7.html" />
    <id>http://shi2wei3.github.io/posts/2014-12-03-oracle-11g-xe-on-rhel7.html</id>
    <published>2014-12-03T00:00:00Z</published>
    <updated>2014-12-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>The prerequisite is i assume you already got a RHEL7 installed with GNOME3</p>
<h2 id="install-oracle-database">Install oracle database</h2>
<p>it needs swap volume at least specify space</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="fu">unzip</span> oracle-xe-11.2.0-1.0.x86_64.rpm.zip
<span class="bu">cd</span> Disk1
<span class="fu">sudo</span> rpm -ivh oracle-xe-11.2.0-1.0.x86_64.rpm</code></pre></div>
<h2 id="install-sqlplus">Install sqlplus</h2>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="fu">sudo</span> rpm -ivh oracle-instantclient12.1-basic-12.1.0.2.0-1.x86_64.rpm
<span class="fu">sudo</span> rpm -ivh oracle-instantclient12.1-sqlplus-12.1.0.2.0-1.x86_64.rpm</code></pre></div>
<p>If you got the error below, you need to add library path manually: sqlplus64: error while loading shared libraries: libsqlplus.so: cannot open shared object file: No such file or directory</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="bu">export</span> <span class="va">LD_LIBRARY_PATH=$LD_LIBRARY_PATH</span>:/usr/lib/oracle/12.1/client64/lib/</code></pre></div>
<h2 id="install-sqldeveloper-optional">Install sqldeveloper (Optional)</h2>
<p>Install jdk</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="fu">sudo</span> rpm -ivh jdk-7u72-linux-x64.rpm
<span class="fu">sudo</span> rpm -ivh sqldeveloper-4.0.3.16.84-1.noarch.rpm</code></pre></div>
<p>Update JDK_HOME to SetJavaHome in: ~/.sqldeveloper/4.0.0/product.conf</p>
<p>Add the command below to /usr/local/bin/sqldeveloper: unset GNOME_DESKTOP_SESSION_ID</p>
<h2 id="login-to-apex-optional">Login to APEX (Optional)</h2>
<p>http://localhost:8080/apex/apex_admin</p>
<p>if you forgot the admin password, you can change it follow the <a href="http://www.oracle.com/webfolder/technetwork/tutorials/obe/db/11g/r2/prod/install/apexinst/apexinst_prod.htm">steps</a></p>
<h2 id="how-to-restart-database">How to restart database</h2>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="ex">/etc/init.d/oracle-xe</span> restart</code></pre></div>
<h2 id="do-experiment-for-joel-spolskys-the-law-of-leaky-abstractions">Do experiment for Joel Spolsky’s “The Law of Leaky Abstractions”</h2>
<div class="sourceCode"><pre class="sourceCode sql"><code class="sourceCode sql"><span class="co">-- create new tablespace</span>
<span class="kw">create</span> <span class="kw">tablespace</span> <span class="kw">DATA</span>
  <span class="kw">datafile</span> <span class="st">&#39;/u01/app/oracle/oradata/XE/data.dbf&#39;</span>
  <span class="kw">size</span> 1024m
  <span class="kw">autoextend</span> <span class="kw">on</span>
  <span class="kw">next</span> 10m <span class="kw">maxsize</span> 10240m
  <span class="kw">extent</span> <span class="kw">management</span> <span class="kw">local</span>;

<span class="co">-- create new user</span>
<span class="kw">create</span> <span class="fu">user</span> wshi
  <span class="kw">identified</span> <span class="kw">by</span> <span class="ot">&quot;redhat&quot;</span>
  <span class="kw">default</span> <span class="kw">tablespace</span> <span class="ot">&quot;DATA&quot;</span>
  <span class="kw">temporary</span> <span class="kw">tablespace</span> <span class="ot">&quot;TEMP&quot;</span>
  <span class="kw">profile</span> <span class="kw">DEFAULT</span>;

<span class="co">-- grant enough permissions</span>
<span class="kw">GRANT</span> <span class="ot">&quot;CONNECT&quot;</span> <span class="kw">TO</span> wshi;
<span class="kw">GRANT</span> <span class="ot">&quot;DBA&quot;</span> <span class="kw">TO</span> wshi;
<span class="kw">GRANT</span> <span class="ot">&quot;RESOURCE&quot;</span> <span class="kw">TO</span> wshi;

<span class="co">-- create three tables</span>
<span class="kw">create</span> <span class="kw">table</span> table_a (<span class="kw">id</span> <span class="dt">NUMBER</span>(<span class="dv">10</span>), <span class="fu">value</span> <span class="dt">VARCHAR2</span>(<span class="dv">10</span>));
<span class="kw">create</span> <span class="kw">table</span> table_b (<span class="kw">id</span> <span class="dt">NUMBER</span>(<span class="dv">10</span>), <span class="fu">value</span> <span class="dt">VARCHAR2</span>(<span class="dv">10</span>));
<span class="kw">create</span> <span class="kw">table</span> table_c (<span class="kw">id</span> <span class="dt">NUMBER</span>(<span class="dv">10</span>), <span class="fu">value</span> <span class="dt">VARCHAR2</span>(<span class="dv">10</span>));

<span class="co">-- insert 5000 records to each table</span>
<span class="kw">declare</span>
  v_id       <span class="dt">number</span>(<span class="dv">10</span>);
  strSql     <span class="dt">varchar2</span>(<span class="dv">1000</span>);
<span class="kw">begin</span>
  <span class="kw">for</span> i <span class="kw">in</span> <span class="dv">1</span> .. <span class="dv">5000</span> <span class="kw">loop</span>
    strSql := <span class="st">&#39;insert into table_a(id, value) values (&#39;</span> || i || <span class="st">&#39;, </span><span class="ch">&#39;&#39;</span><span class="st">&#39;</span> || <span class="fu">abs</span>(<span class="fu">mod</span>(dbms_random.random,<span class="dv">100</span>)) || <span class="st">&#39;</span><span class="ch">&#39;&#39;</span><span class="st">)&#39;</span>;
    <span class="kw">execute</span> <span class="kw">immediate</span> strSql;
    strSql := <span class="st">&#39;insert into table_b(id, value) values (&#39;</span> || i || <span class="st">&#39;, </span><span class="ch">&#39;&#39;</span><span class="st">&#39;</span> || <span class="fu">abs</span>(<span class="fu">mod</span>(dbms_random.random,<span class="dv">100</span>)) || <span class="st">&#39;</span><span class="ch">&#39;&#39;</span><span class="st">)&#39;</span>;
    <span class="kw">execute</span> <span class="kw">immediate</span> strSql;
    strSql := <span class="st">&#39;insert into table_c(id, value) values (&#39;</span> || i || <span class="st">&#39;, </span><span class="ch">&#39;&#39;</span><span class="st">&#39;</span> || <span class="fu">abs</span>(<span class="fu">mod</span>(dbms_random.random,<span class="dv">100</span>)) || <span class="st">&#39;</span><span class="ch">&#39;&#39;</span><span class="st">)&#39;</span>;
    <span class="kw">execute</span> <span class="kw">immediate</span> strSql;
  <span class="kw">end</span> <span class="kw">loop</span>;
<span class="kw">end</span>;
/

<span class="kw">commit</span>;

<span class="co">-- enble executioin plan after sql executed</span>
<span class="kw">SET</span> AUTOTRACE <span class="kw">ON</span> <span class="kw">EXPLAIN</span> STATUS;

<span class="co">-- compare the differents between the following two SQL</span>
<span class="kw">select</span> <span class="fu">count</span>(*) <span class="kw">from</span> table_a a, table_b b, table_c c <span class="kw">where</span> a.id = b.id <span class="kw">and</span> b.id = c.id;
<span class="kw">select</span> <span class="fu">count</span>(*) <span class="kw">from</span> table_a a, table_b b, table_c c <span class="kw">where</span> a.id = b.id <span class="kw">and</span> b.id = c.id <span class="kw">and</span> c.id = a.id;</code></pre></div>
<p>Here are the execution plans, and we could find the join method and the join condition is quite different, also we need to consider the table analysis and the env(record amount, memory etc) would affect the result, but generally the second SQL runs dramatically faster than the first one.</p>
<pre><code>  COUNT(*)
----------
      5000

Plan hash value: 2792619341

----------------------------------------------------------------------------------
| Id  | Operation              | Name    | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------
|   0 | SELECT STATEMENT       |         |     1 |    39 |   688   (1)| 00:00:09 |
|   1 |  SORT AGGREGATE        |         |     1 |    39 |            |          |
|*  2 |   HASH JOIN            |         |     1 |    39 |   688   (1)| 00:00:09 |
|   3 |    MERGE JOIN CARTESIAN|         |     1 |    26 |   686   (1)| 00:00:09 |
|   4 |     TABLE ACCESS FULL  | TABLE_A |     1 |    13 |   684   (1)| 00:00:09 |
|   5 |     BUFFER SORT        |         |     1 |    13 |     2   (0)| 00:00:01 |
|   6 |      TABLE ACCESS FULL | TABLE_C |     1 |    13 |     2   (0)| 00:00:01 |
|   7 |    TABLE ACCESS FULL   | TABLE_B |     1 |    13 |     2   (0)| 00:00:01 |
----------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access(&quot;A&quot;.&quot;ID&quot;=&quot;B&quot;.&quot;ID&quot; AND &quot;B&quot;.&quot;ID&quot;=&quot;C&quot;.&quot;ID&quot;)

  COUNT(*)
----------
      5000

Plan hash value: 4050381587

--------------------------------------------------------------------------------
| Id  | Operation            | Name    | Rows  | Bytes | Cost (%CPU)| Time     |
--------------------------------------------------------------------------------
|   0 | SELECT STATEMENT     |         |     1 |    39 |   689   (1)| 00:00:09 |
|   1 |  SORT AGGREGATE      |         |     1 |    39 |            |          |
|*  2 |   HASH JOIN          |         |     1 |    39 |   689   (1)| 00:00:09 |
|*  3 |    HASH JOIN         |         |     1 |    26 |   686   (1)| 00:00:09 |
|   4 |     TABLE ACCESS FULL| TABLE_A |     1 |    13 |   684   (1)| 00:00:09 |
|   5 |     TABLE ACCESS FULL| TABLE_B |     1 |    13 |     2   (0)| 00:00:01 |
|   6 |    TABLE ACCESS FULL | TABLE_C |     1 |    13 |     2   (0)| 00:00:01 |
--------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access(&quot;B&quot;.&quot;ID&quot;=&quot;C&quot;.&quot;ID&quot; AND &quot;C&quot;.&quot;ID&quot;=&quot;A&quot;.&quot;ID&quot;)
   3 - access(&quot;A&quot;.&quot;ID&quot;=&quot;B&quot;.&quot;ID&quot;)
</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>Philosophically speaking, SQL (as an abstraction) was meant to hide all aspects of implementation. It was meant to be declarative (a SQL server can itself use sql query optimization techniques to rephrase the query to make them more efficient). But in the real world it is not so - often the database queries have to be rewritten by humans to make them more efficient.</p>]]></summary>
</entry>
<entry>
    <title>My first blog</title>
    <link href="http://shi2wei3.github.io/posts/2014-12-02-my-first-blog.html" />
    <id>http://shi2wei3.github.io/posts/2014-12-02-my-first-blog.html</id>
    <published>2014-12-02T00:00:00Z</published>
    <updated>2014-12-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>So excited now, it takes me four days to build this whole site. This site is hosted on <a href="https://github.com/shi2wei3/shi2wei3.github.io">Github</a>, powered by <a href="http://jaspervdj.be/hakyll">hakyll</a> which is written in <a href="https://www.haskell.org">haskell</a>. I like to use termal(console) rather than GUI, tmux, mutt, irssi is my favorite. I’ll main post technical sharings here about Linux, programing languages and Virtualization/Cloud related things. Tweet me up at <a href="https://twitter.com/shi2wei3">@shi2wei3</a></p>]]></summary>
</entry>

</feed>
